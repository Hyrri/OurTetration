{
  "version": 3,
  "sources": ["../../fast-complex/index.js"],
  "sourcesContent": ["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * @license\n * MIT License\n *\n * Copyright (c) 2019 Alexis Munsayac\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n *\n * @author Alexis Munsayac <alexis.munsayac@gmail.com>\n * @copyright Alexis Munsayac 2019\n */\n/* eslint-disable no-nested-ternary */\n/**\n * @typedef {Array|Float32Array|Float64Array|number} complex\n */\n/**\n * @ignore\n */\nconst {\n  sqrt: msqrt, max, ceil: mceil,\n  floor: mfloor, abs: mabs, exp: mexp, log10: mlog10,\n  log: mlog, cos: mcos, sin: msin, tan: mtan,\n  asin: masin, acos: macos, atan: matan, atan2: matan2,\n  cosh: mcosh, sinh: msinh, tanh: mtanh, sign: msign,\n} = Math;\n/**\n * @ignore\n */\nconst masinh = x => mlog(x + msqrt(x * x + 1));\n/**\n * @ignore\n */\nconst macosh = x => mlog(x + msqrt(x * x - 1));\n/**\n * @ignore\n */\nconst matanh = x => mlog((1 + x) / (1 - x)) / 2;\n/**\n * @ignore\n */\nconst BASE_10 = [mlog(10), 0];\n/**\n * The value 2 in complex form\n */\nconst TWO = Object.freeze([2, 0]);\n/**\n * The value 1 in complex form\n */\nconst ONE = Object.freeze([1, 0]);\n/**\n * The value 0 in complex form\n */\nconst ZERO = Object.freeze([0, 0]);\n/**\n * The square root of -1\n */\nconst I = Object.freeze([0, 1]);\n/**\n * The square root of -1\n */\nconst HALF_I = Object.freeze([0, 0.5]);\n/**\n * The negative square root of -1\n */\nconst NI = Object.freeze([0, -1]);\n/**\n * A NaN complex\n */\nconst NAN = Object.freeze([NaN, NaN]);\n/**\n * @ignore\n */\nconst EPSILON = 1e-7;\n/**\n * @ignore\n */\nconst eq = (a, b) => mabs(a - b) <= EPSILON * max(1, mabs(a), mabs(b));\n/**\n * @ignore\n */\nconst isNumber = x => typeof x === 'number';\n/**\n * @ignore\n */\nconst unsafeL2 = c => c[0] * c[0] + c[1] * c[1];\n/**\n * @ignore\n */\nconst unsafeAbs = c => msqrt(unsafeL2(c));\n/**\n * @ignore\n */\nconst unsafeArg = c => matan2(c[1], c[0]);\n/**\n * @ignore\n */\nconst unsafeAdd = (a, b) => [a[0] + b[0], a[1] + b[1]];\n/**\n * @ignore\n */\nconst unsafeSub = (a, b) => [a[0] - b[0], a[1] - b[1]];\n/**\n * @ignore\n */\nconst unsafeMul = (a, b) => [\n  a[0] * b[0] - a[1] * b[1],\n  a[0] * b[1] + a[1] * b[0],\n];\n/**\n * @ignore\n */\nconst unsafeDiv = (a, b) => [\n  (a[0] * b[0] + a[1] * b[1]) / unsafeL2(b),\n  (a[1] * b[0] - a[0] * b[1]) / unsafeL2(b),\n];\n/**\n * @ignore\n */\nconst unsafeSqrt = c => [\n  msqrt((c[0] + unsafeAbs(c)) / 2),\n  msqrt((-c[0] + unsafeAbs(c)) / 2) * msign(c[1]),\n];\n/**\n * @ignore\n */\nconst unsafeLn = c => [\n  mlog(unsafeAbs(c)),\n  unsafeArg(c),\n];\n/**\n * @ignore\n */\nconst unsafeExp = c => [\n  mexp(c[0]) * mcos(c[1]),\n  mexp(c[0]) * msin(c[1]),\n];\n/**\n * @ignore\n */\nconst unsafeCos = c => [mcos(c[0]) * mcosh(c[1]), -msin(c[0]) * msinh(c[1])];\n/**\n * @ignore\n */\nconst unsafeSin = c => [msin(c[0]) * mcosh(c[1]), mcos(c[0]) * msinh(c[1])];\n/**\n * @ignore\n */\nconst unsafeCosh = c => [mcosh(c[0]) * mcos(c[1]), msinh(c[0]) * msin(c[1])];\n/**\n * @ignore\n */\nconst unsafeSinh = c => [msinh(c[0]) * mcos(c[1]), mcosh(c[0]) * msin(c[1])];\n/**\n * @ignore\n */\nconst unsafeAsin = c => unsafeMul(\n  NI,\n  unsafeLn(\n    unsafeAdd(\n      unsafeMul(I, c),\n      unsafeSqrt(unsafeSub(ONE, unsafeMul(c, c))),\n    ),\n  ),\n);\n/**\n * @ignore\n */\nconst unsafeAcos = c => unsafeMul(\n  NI,\n  unsafeLn(\n    unsafeAdd(\n      c,\n      unsafeSqrt(unsafeSub(unsafeMul(c, c), ONE)),\n    ),\n  ),\n);\n/**\n * @ignore\n */\nconst unsafeAtan = c => unsafeMul(\n  HALF_I,\n  unsafeLn(\n    unsafeDiv(\n      [c[0], 1 + c[1]],\n      [-c[0], 1 - c[1]],\n    ),\n  ),\n);\n/**\n * @ignore\n */\nconst unsafeAsinh = (c) => {\n  const r = unsafeMul(c, c);\n  r[0] += 1;\n  return unsafeLn(unsafeAdd(c, unsafeSqrt(r)));\n};\n/**\n * @ignore\n */\nconst unsafeAcosh = (c) => {\n  const r = unsafeMul(c, c);\n  r[0] -= 1;\n  return unsafeLn(unsafeAdd(c, unsafeSqrt(r)));\n};\n/**\n * @ignore\n */\nconst unsafeAtanh = c => unsafeMul(\n  unsafeLn(unsafeDiv(\n    unsafeAdd(ONE, c),\n    unsafeSub(ONE, c),\n  )),\n  [0.5, 0],\n);\n/**\n * Checks if a value is a valid complex value.\n */\nconst isComplex = x => (x instanceof Array && isNumber(x[0]) && isNumber(x[1]))\n  || x instanceof Float32Array\n  || x instanceof Float64Array;\n/**\n * Creates a zero complex value (different from ZERO)\n */\nconst zero = () => [0, 0];\n/**\n * Solves the conjugate of a given complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst conjugate = c => (\n  (isComplex(c) && [c[0], -c[1]])\n  || (isNumber(c) && [c, 0])\n  || NAN\n);\n/**\n * Negates the given complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst negate = c => (\n  (isComplex(c) && [-c[0], -c[1]])\n  || (isNumber(c) && [-c, 0])\n  || NAN\n);\n\n/**\n * Adds two complex\n * @param {!complex} a\n * @param {!complex} b\n * Returns NaN complex if one of the given values is not a complex.\n */\nconst add = (a, b) => (\n  (isComplex(a) && (\n    (isComplex(b) && unsafeAdd(a, b))\n    || (isNumber(b) && [a[0] + b, a[1]])\n  ))\n  || (isNumber(a) && (\n    (isComplex(b) && [a + b[0], b[1]])\n    || (isNumber(b) && [a + b, 0])\n  ))\n  || NAN\n);\n\n/**\n * Subtracts two complex\n * @param {!complex} a\n * @param {!complex} b\n * Returns NaN complex if one of the given values is not a complex.\n */\nconst sub = (a, b) => (\n  (isComplex(a) && (\n    (isComplex(b) && unsafeSub(a, b))\n    || (isNumber(b) && [a[0] - b, a[1]])\n  ))\n  || (isNumber(a) && (\n    (isComplex(b) && [a - b[0], b[1]])\n    || (isNumber(b) && [a - b, 0])\n  ))\n  || NAN\n);\n\n/**\n * Multiplies two complex\n * @param {!complex} a\n * @param {!complex} b\n * Returns NaN complex if one of the given values is not a complex.\n */\nconst mul = (a, b) => (\n  (isComplex(a) && (\n    (isComplex(b) && unsafeMul(a, b))\n    || (isNumber(b) && [a[0] * b, a[1] * b])\n  ))\n  || (isNumber(a) && (\n    (isComplex(b) && [a * b[0], a * b[1]])\n    || (isNumber(b) && [a * b, 0])\n  ))\n  || NAN\n);\n\n/**\n * Divides two complex\n * @param {!complex} a\n * @param {!complex} b\n * Returns NaN complex if one of the given values is not a complex.\n */\nconst div = (a, b) => (\n  (isComplex(a) && (\n    (isComplex(b) && unsafeDiv(a, b))\n    || (isNumber(b) && [a[0] / b, a[1] / b])\n  ))\n  || (isNumber(a) && (\n    (isComplex(b) && [a / b[0], a / b[1]])\n    || (isNumber(b) && [a * b, 0])\n  ))\n  || NAN\n);\n\n/**\n * Returns the reciprocal of a complex\n * @param {!complex} c\n * Returns NaN complex if the given value is not a complex.\n */\nconst reciprocal = c => (isComplex(c)\n  && [\n    c[0] / unsafeL2(c),\n    -c[1] / unsafeL2(c),\n  ])\n  || (isNumber(c) && [1 / c, 0])\n  || NAN;\n/**\n * Returns the modulus/magnitude of the complex\n * @param {!complex} c\n * @returns {number}\n * Returns NaN if the value is not a valid complex\n */\nconst abs = c => (\n  (isComplex(c) && unsafeAbs(c))\n  || (isNumber(c) ? c : NaN)\n);\n\n/**\n * Returns the argument of a complex\n * @param {!complex} c\n * @returns {number}\n * Returns NaN if the value is not a valid complex.\n */\nconst arg = c => (\n  (isComplex(c) && unsafeArg(c))\n  || (isNumber(c) ? 0 : NaN)\n);\n\n/**\n * Converts a radian value into a complex number.\n * @param {!number} x\n * @returns {complex}\n * Returns NaN if the value is not a number.\n */\nconst euler = x => (\n  (isNumber(x) && [mcos(x), msin(x)])\n  || NAN\n);\n\n/**\n * Calculates the signum of a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst sign = c => (\n  (isComplex(c) && [c[0] / unsafeAbs(c), c[1] / unsafeAbs(c)])\n  || (isNumber(c) && [msign(c), 0])\n  || NAN\n);\n\n/**\n * Calculates the square root of a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst sqrt = c => (\n  (isComplex(c) && (\n    (eq(c[1], 0) && [msqrt(c[0]), 0])\n    || unsafeSqrt(c)\n  ))\n  || (isNumber(c) && [msqrt(c), 0])\n  || NAN\n);\n\n/**\n * Calculates the exponentiation of a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst exp = c => (\n  (isComplex(c) && unsafeExp(c))\n  || (isNumber(c) && [mexp(c), 0])\n  || NAN\n);\n\n/**\n * Calculates the natural logarithm of a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst ln = c => (\n  (isComplex(c) && unsafeLn(c))\n  || (isNumber(c) && [mlog(c), 0])\n  || NAN\n);\n\n/**\n * Calculates the base 10 logarithm of a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst log10 = c => (\n  (isComplex(c) && unsafeDiv(unsafeLn(c), BASE_10))\n  || (isNumber(c) && [mlog10(c), 0])\n  || NAN\n);\n\n/**\n * Raises the complex to the n-th complex power\n * @param {!complex} a\n * @param {!complex} b\n * @returns {complex}\n * Returns NaN complex if one of the given values is not a complex.\n */\nconst pow = (a, b) => (\n  (isComplex(a) && isComplex(b) && unsafeExp(unsafeMul(unsafeLn(a), b)))\n  || (isNumber(a) && pow([a, 0], b))\n  || (isNumber(b) && pow(a, [b, 0]))\n  || NAN\n);\n\n/**\n * Applies a floor function to a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst floor = c => (\n  (isComplex(c) && [mfloor(c[0]), mfloor(c[1])])\n  || (isNumber(c) && [mfloor(c), 0])\n  || NAN\n);\n\n/**\n * Applies a ceiling function to a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst ceil = c => (\n  (isComplex(c) && [mceil(c[0]), mceil(c[1])])\n  || (isNumber(c) && [mceil(c), 0])\n  || NAN\n);\n\n/**\n * Converts polar coordinates into a complex\n * @param {!number} radius\n * @param {!number} phi\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst polar = (radius, phi) => (\n  (isNumber(radius) && isNumber(phi) && [radius * mcos(phi), radius * msin(phi)])\n  || NAN\n);\n\n/**\n * Applies a sine function to a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst sin = c => (\n  (isComplex(c) && unsafeSin(c))\n  || (isNumber(c) && [msin(c), 0])\n  || NAN\n);\n\n/**\n * Applies a cosine function to a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst cos = c => (\n  (isComplex(c) && unsafeCos(c))\n  || (isNumber(c) && [mcos(c), 0])\n  || NAN\n);\n\n/**\n * Applies a tangent function to a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst tan = c => (\n  (isComplex(c) && unsafeDiv(unsafeSin(c), unsafeCos(c)))\n  || (isNumber(c) && [mtan(c), 0])\n  || NAN\n);\n\n/**\n * Applies a inverse sine function to a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst asin = c => (\n  (isComplex(c) && unsafeAsin(c))\n  || (isNumber(c) && [masin(c), 0])\n  || NAN\n);\n\n/**\n * Applies a inverse cosine function to a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst acos = c => (\n  (isComplex(c) && unsafeAcos(c))\n  || (isNumber(c) && [macos(c), 0])\n  || NAN\n);\n\n/**\n * Applies a inverse tangent function to a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst atan = c => (\n  (isComplex(c) && unsafeAtan(c))\n  || (isNumber(c) && [matan(c), 0])\n  || NAN\n);\n\n/**\n * Applies a hyperbolic sine function to a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst sinh = c => (\n  (isComplex(c) && unsafeSinh(c))\n  || (isNumber(c) && [msinh(c), 0])\n  || NAN\n);\n\n/**\n * Applies a hyperbolic cosine function to a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst cosh = c => (\n  (isComplex(c) && unsafeCosh(c))\n  || (isNumber(c) && [mcosh(c), 0])\n  || NAN\n);\n\n/**\n * Applies a hyperbolic tangent function to a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst tanh = c => (\n  (isComplex(c) && unsafeDiv(unsafeSinh(c), unsafeCosh(c)))\n  || (isNumber(c) && [mtanh(c), 0])\n  || NAN\n);\n\n/**\n * Applies a hyperbolic inverse sine function to a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst asinh = c => (\n  (isComplex(c) && unsafeAsinh(c))\n  || (isNumber(c) && [masinh(c), 0])\n  || NAN\n);\n\n/**\n * Applies a hyperbolic inverse cosine function to a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst acosh = c => (\n  (isComplex(c) && unsafeAcosh(c))\n  || (isNumber(c) && [macosh(c), 0])\n  || NAN\n);\n\n/**\n * Applies a hyperbolic inverse tangent function to a complex\n * @param {!complex} c\n * @returns {complex}\n * Returns NaN complex if the given value is not a complex.\n */\nconst atanh = c => (\n  (isComplex(c) && unsafeAtanh(c))\n  || (isNumber(c) && [matanh(c), 0])\n  || NAN\n);\n\n/**\n * Check if two complex are equal\n * @param {!complex} a\n * @param {!complex} b\n * @returns {boolean}\n */\nconst equals = (a, b) => (\n  (isComplex(a) && isComplex(b) && eq(a[0], b[0]) && eq(a[1], b[1]))\n  || a === b\n);\n\nexports.HALF_I = HALF_I;\nexports.I = I;\nexports.NAN = NAN;\nexports.NI = NI;\nexports.ONE = ONE;\nexports.TWO = TWO;\nexports.ZERO = ZERO;\nexports.abs = abs;\nexports.acos = acos;\nexports.acosh = acosh;\nexports.add = add;\nexports.arg = arg;\nexports.asin = asin;\nexports.asinh = asinh;\nexports.atan = atan;\nexports.atanh = atanh;\nexports.ceil = ceil;\nexports.conjugate = conjugate;\nexports.cos = cos;\nexports.cosh = cosh;\nexports.div = div;\nexports.equals = equals;\nexports.euler = euler;\nexports.exp = exp;\nexports.floor = floor;\nexports.isComplex = isComplex;\nexports.ln = ln;\nexports.log10 = log10;\nexports.mul = mul;\nexports.negate = negate;\nexports.polar = polar;\nexports.pow = pow;\nexports.reciprocal = reciprocal;\nexports.sign = sign;\nexports.sin = sin;\nexports.sinh = sinh;\nexports.sqrt = sqrt;\nexports.sub = sub;\nexports.tan = tan;\nexports.tanh = tanh;\nexports.zero = zero;\n"],
  "mappings": "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",
  "names": []
}
